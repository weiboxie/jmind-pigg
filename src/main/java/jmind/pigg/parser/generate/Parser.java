/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package jmind.pigg.parser.generate;

import java.io.Reader;
import java.io.StringReader;

import jmind.pigg.parser.ASTAndNode;
import jmind.pigg.parser.ASTBlank;
import jmind.pigg.parser.ASTBlock;
import jmind.pigg.parser.ASTDelete;
import jmind.pigg.parser.ASTEQNode;
import jmind.pigg.parser.ASTElseIfStatement;
import jmind.pigg.parser.ASTElseStatement;
import jmind.pigg.parser.ASTExpression;
import jmind.pigg.parser.ASTExpressionParameter;
import jmind.pigg.parser.ASTFalse;
import jmind.pigg.parser.ASTGENode;
import jmind.pigg.parser.ASTGTNode;
import jmind.pigg.parser.ASTGlobalTable;
import jmind.pigg.parser.ASTIfStatement;
import jmind.pigg.parser.ASTInsert;
import jmind.pigg.parser.ASTIntegerLiteral;
import jmind.pigg.parser.ASTJDBCIterableParameter;
import jmind.pigg.parser.ASTJDBCParameter;
import jmind.pigg.parser.ASTJoinParameter;
import jmind.pigg.parser.ASTLENode;
import jmind.pigg.parser.ASTLTNode;
import jmind.pigg.parser.ASTMerge;
import jmind.pigg.parser.ASTNENode;
import jmind.pigg.parser.ASTNotNode;
import jmind.pigg.parser.ASTNull;
import jmind.pigg.parser.ASTOrNode;
import jmind.pigg.parser.ASTQuoteText;
import jmind.pigg.parser.ASTReplace;
import jmind.pigg.parser.ASTRootNode;
import jmind.pigg.parser.ASTSelect;
import jmind.pigg.parser.ASTStringLiteral;
import jmind.pigg.parser.ASTText;
import jmind.pigg.parser.ASTTrue;
import jmind.pigg.parser.ASTTruncate;
import jmind.pigg.parser.ASTUpdate;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();public Parser(String s) {
        this((Reader)(new StringReader(s)));
    }

  final public ASTRootNode parse() throws ParseException {
                                  /*@bgen(jjtree) RootNode */
  ASTRootNode jjtn000 = new ASTRootNode(JJTROOTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      DML();
            ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_1:
        while (true) {
          Statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLANK:
          case QUOTE_TEXT:
          case JDBC_ITERABLE_PARAMETER:
          case JDBC_PARAMETER:
          case GLOBAL_TABLE:
          case JOIN_PARAMETER:
          case IF_DIRECTIVE:
          case INSERT:
          case DELETE:
          case UPDATE:
          case SELECT:
          case REPLACE:
          case MERGE:
          case TRUNCATE:
          case TEXT:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void DML() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      Insert();
      break;
    case DELETE:
      Delete();
      break;
    case UPDATE:
      Update();
      break;
    case SELECT:
      Select();
      break;
    case REPLACE:
      Replace();
      break;
    case MERGE:
      Merge();
      break;
    case TRUNCATE:
      Truncate();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Insert() throws ParseException {
 /*@bgen(jjtree) Insert */
    ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(INSERT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Delete() throws ParseException {
 /*@bgen(jjtree) Delete */
    ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(DELETE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Update() throws ParseException {
 /*@bgen(jjtree) Update */
    ASTUpdate jjtn000 = new ASTUpdate(JJTUPDATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(UPDATE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Select() throws ParseException {
 /*@bgen(jjtree) Select */
    ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(SELECT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Replace() throws ParseException {
 /*@bgen(jjtree) Replace */
    ASTReplace jjtn000 = new ASTReplace(JJTREPLACE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(REPLACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Merge() throws ParseException {
 /*@bgen(jjtree) Merge */
    ASTMerge jjtn000 = new ASTMerge(JJTMERGE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(MERGE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Truncate() throws ParseException {
 /*@bgen(jjtree) Truncate */
    ASTTruncate jjtn000 = new ASTTruncate(JJTTRUNCATE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(TRUNCATE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JDBC_PARAMETER:
      JDBCParameter();
      break;
    case JDBC_ITERABLE_PARAMETER:
      JDBCIterableParameter();
      break;
    case GLOBAL_TABLE:
      GlobalTable();
      break;
    case JOIN_PARAMETER:
      JoinParameter();
      break;
    case IF_DIRECTIVE:
      IfStatement();
      break;
    case QUOTE_TEXT:
      QuoteText();
      break;
    case INSERT:
    case DELETE:
    case UPDATE:
    case SELECT:
    case REPLACE:
    case MERGE:
    case TRUNCATE:
    case TEXT:
      Text();
      break;
    case BLANK:
      Blank();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void JDBCParameter() throws ParseException {
 /*@bgen(jjtree) JDBCParameter */
    ASTJDBCParameter jjtn000 = new ASTJDBCParameter(JJTJDBCPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(JDBC_PARAMETER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void JDBCIterableParameter() throws ParseException {
 /*@bgen(jjtree) JDBCIterableParameter */
    ASTJDBCIterableParameter jjtn000 = new ASTJDBCIterableParameter(JJTJDBCITERABLEPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(JDBC_ITERABLE_PARAMETER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void GlobalTable() throws ParseException {
 /*@bgen(jjtree) GlobalTable */
  ASTGlobalTable jjtn000 = new ASTGlobalTable(JJTGLOBALTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GLOBAL_TABLE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void JoinParameter() throws ParseException {
 /*@bgen(jjtree) JoinParameter */
    ASTJoinParameter jjtn000 = new ASTJoinParameter(JJTJOINPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(JOIN_PARAMETER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void QuoteText() throws ParseException {
 /*@bgen(jjtree) QuoteText */
    ASTQuoteText jjtn000 = new ASTQuoteText(JJTQUOTETEXT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(QUOTE_TEXT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Text() throws ParseException {
 /*@bgen(jjtree) Text */
    ASTText jjtn000 = new ASTText(JJTTEXT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        t = jj_consume_token(TEXT);
        break;
      case INSERT:
        t = jj_consume_token(INSERT);
        break;
      case DELETE:
        t = jj_consume_token(DELETE);
        break;
      case UPDATE:
        t = jj_consume_token(UPDATE);
        break;
      case SELECT:
        t = jj_consume_token(SELECT);
        break;
      case REPLACE:
        t = jj_consume_token(REPLACE);
        break;
      case MERGE:
        t = jj_consume_token(MERGE);
        break;
      case TRUNCATE:
        t = jj_consume_token(TRUNCATE);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Blank() throws ParseException {
 /*@bgen(jjtree) Blank */
    ASTBlank jjtn000 = new ASTBlank(JJTBLANK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(BLANK);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.setValue(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF_DIRECTIVE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
          ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLANK:
          case QUOTE_TEXT:
          case JDBC_ITERABLE_PARAMETER:
          case JDBC_PARAMETER:
          case GLOBAL_TABLE:
          case JOIN_PARAMETER:
          case IF_DIRECTIVE:
          case INSERT:
          case DELETE:
          case UPDATE:
          case SELECT:
          case REPLACE:
          case MERGE:
          case TRUNCATE:
          case TEXT:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_2;
          }
          Statement();
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF_DIRECTIVE:
        label_3:
        while (true) {
          ElseIfStatement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSEIF_DIRECTIVE:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE_DIRECTIVE:
        ElseStatement();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ElseStatement() throws ParseException {
 /*@bgen(jjtree) ElseStatement */
  ASTElseStatement jjtn000 = new ASTElseStatement(JJTELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELSE_DIRECTIVE);
          ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLANK:
          case QUOTE_TEXT:
          case JDBC_ITERABLE_PARAMETER:
          case JDBC_PARAMETER:
          case GLOBAL_TABLE:
          case JOIN_PARAMETER:
          case IF_DIRECTIVE:
          case INSERT:
          case DELETE:
          case UPDATE:
          case SELECT:
          case REPLACE:
          case MERGE:
          case TRUNCATE:
          case TEXT:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
          Statement();
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ElseIfStatement() throws ParseException {
 /*@bgen(jjtree) ElseIfStatement */
  ASTElseIfStatement jjtn000 = new ASTElseIfStatement(JJTELSEIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELSEIF_DIRECTIVE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
          ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLANK:
          case QUOTE_TEXT:
          case JDBC_ITERABLE_PARAMETER:
          case JDBC_PARAMETER:
          case GLOBAL_TABLE:
          case JOIN_PARAMETER:
          case IF_DIRECTIVE:
          case INSERT:
          case DELETE:
          case UPDATE:
          case SELECT:
          case REPLACE:
          case MERGE:
          case TRUNCATE:
          case TEXT:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_5;
          }
          Statement();
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ConditionalOrExpression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_OR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(LOGICAL_OR);
                         ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_AND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(LOGICAL_AND);
                        ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
      try {
        RelationalExpression();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    UnaryExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_LT:
      case LOGICAL_LE:
      case LOGICAL_GT:
      case LOGICAL_GE:
      case LOGICAL_EQ:
      case LOGICAL_NE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGICAL_LT:
        jj_consume_token(LOGICAL_LT);
                              ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      case LOGICAL_GT:
        jj_consume_token(LOGICAL_GT);
                              ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtn002.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
        } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtn002.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      case LOGICAL_LE:
        jj_consume_token(LOGICAL_LE);
                              ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
                              boolean jjtc003 = true;
                              jjtree.openNodeScope(jjtn003);
                              jjtn003.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
                              if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte003 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte003;}
                              }
                              if (jjte003 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte003;}
                              }
                              {if (true) throw (Error)jjte003;}
        } finally {
                              if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003,  2);
                                jjtn003.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      case LOGICAL_GE:
        jj_consume_token(LOGICAL_GE);
                              ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
                              jjtn004.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte004) {
                              if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte004;}
                              }
                              if (jjte004 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte004;}
                              }
                              {if (true) throw (Error)jjte004;}
        } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004,  2);
                                jjtn004.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      case LOGICAL_EQ:
        jj_consume_token(LOGICAL_EQ);
                              ASTEQNode jjtn005 = new ASTEQNode(JJTEQNODE);
                              boolean jjtc005 = true;
                              jjtree.openNodeScope(jjtn005);
                              jjtn005.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte005) {
                              if (jjtc005) {
                                jjtree.clearNodeScope(jjtn005);
                                jjtc005 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte005 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte005;}
                              }
                              if (jjte005 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte005;}
                              }
                              {if (true) throw (Error)jjte005;}
        } finally {
                              if (jjtc005) {
                                jjtree.closeNodeScope(jjtn005,  2);
                                jjtn005.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      case LOGICAL_NE:
        jj_consume_token(LOGICAL_NE);
                              ASTNENode jjtn006 = new ASTNENode(JJTNENODE);
                              boolean jjtc006 = true;
                              jjtree.openNodeScope(jjtn006);
                              jjtn006.jjtSetFirstToken(getToken(1));
        try {
          UnaryExpression();
        } catch (Throwable jjte006) {
                              if (jjtc006) {
                                jjtree.clearNodeScope(jjtn006);
                                jjtc006 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte006 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte006;}
                              }
                              if (jjte006 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte006;}
                              }
                              {if (true) throw (Error)jjte006;}
        } finally {
                              if (jjtc006) {
                                jjtree.closeNodeScope(jjtn006,  2);
                                jjtn006.jjtSetLastToken(getToken(0));
                              }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGICAL_NOT:
      jj_consume_token(LOGICAL_NOT);
                         ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  1);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
      }
      break;
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case NULL:
    case PARAMETER:
      PrimaryExpression();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETER:
      ExpressionParameter();
      break;
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    case TRUE:
      True();
      break;
    case FALSE:
      False();
      break;
    case NULL:
      Null();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressionParameter() throws ParseException {
 /*@bgen(jjtree) ExpressionParameter */
    ASTExpressionParameter jjtn000 = new ASTExpressionParameter(JJTEXPRESSIONPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(PARAMETER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IntegerLiteral() throws ParseException {
 /*@bgen(jjtree) IntegerLiteral */
    ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void StringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
    ASTStringLiteral jjtn000 = new ASTStringLiteral(JJTSTRINGLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        jjtn000.init(t.image);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void True() throws ParseException {
 /*@bgen(jjtree) True */
  ASTTrue jjtn000 = new ASTTrue(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRUE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void False() throws ParseException {
 /*@bgen(jjtree) False */
  ASTFalse jjtn000 = new ASTFalse(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FALSE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Null() throws ParseException {
 /*@bgen(jjtree) Null */
  ASTNull jjtn000 = new ASTNull(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NULL);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fe3f80,0xfe0000,0x1fe3f80,0x1fe0000,0x1fe3f80,0x4000,0x4000,0x8000,0x1fe3f80,0x1fe3f80,0x8000000,0x4000000,0xf0000000,0xf0000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x4fc,0x4f8,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
